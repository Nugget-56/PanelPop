// For the panel select function...
let selectedPanel = null; 

// For rate limiting
let lastRequestTimestamp = 0;
const throttleDuration = 1000; 

function navigateToPage(page) {
    window.location.href = page;
}

async function query(userInput) {
    try {
        document.getElementById('generateButton').disabled = true; // Disable the button while one request is underway

        document.getElementById('loader').style.display = 'block'; // Displaying the loader

        // If a image already exists in the display panel, remove it
        const existingImgElement = document.querySelector('.edit-panel img');

        if (existingImgElement) {
            existingImgElement.remove();
        }

        console.log(`API called successfully for "${userInput}"`);

        const data = { "inputs": userInput };

        const response = await fetch(
            "https://xdwvg9no7pefghrn.us-east-1.aws.endpoints.huggingface.cloud",
            {
                headers: {
                    "Accept": "image/png",
                    "Authorization": `Bearer VknySbLLTUjbxXAXCjyfaFIPwUTCeRXbFSOjwRiCxsxFyhbnGjSFalPKrpvvDAaPVzWEevPljilLVDBiTzfIbWFdxOkYJxnOPoHhkkVGzAknaOulWggusSFewzpqsNWM`,
                    "Content-Type": "application/json"
                },
                method: "POST",
                body: JSON.stringify(data),
            }
        );

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const result = await response.blob();
        // console.log(result);
        const recievingPanel = document.getElementsByClassName('edit-panel')[0];
        const imgElement = document.createElement('img');
        
        document.getElementById('loader').style.display = 'none'; // Turn off the loader

        imgElement.id = 'marker-img';
        imgElement.style.height = '100%'
        imgElement.style.width = '100%'   
        imgElement.src = URL.createObjectURL(result);
        imgElement.alt = "Generated image";

        recievingPanel.appendChild(imgElement); // Display the image

        console.log('Done');
    } catch (error) {
        console.log('Error:', error);
        // Stop the loader and display the error message to the user
        document.getElementById('loader').style.display = 'none';
        alert(`An error occurred: ${error.message}`);
    } finally {
        document.getElementById('generateButton').disabled = false;
    }
}

// Get the user input(text) and call the api with that text
document.getElementById('generateButton').addEventListener('click', () => {
    const value = document.getElementById('userPrompt').value;
    const error = document.getElementsByClassName("error")[0];
    const now = Date.now();

    // Handle empty request and limit no. of requests
    if (value === "") {
        const errorMessage = 'ðŸ›ˆ Please enter a valid prompt!';
        error.innerHTML = errorMessage;
    } else if (now - lastRequestTimestamp <= throttleDuration) {
        const errorMessage = `ðŸ›ˆ Please wait before making another request!`;
        console.log(lastRequestTimestamp);
        console.log(now);
        console.log(now - lastRequestTimestamp >= throttleDuration);
        error.innerHTML = errorMessage;
        lastRequestTimestamp = now;
    } else {
        const errorMessage = '';
        error.innerHTML = errorMessage;
        query(value);
    }
});

// Photo annotation function
function annotate(element) {
    const markerElement = document.getElementById(element)
    const markerArea = new markerjs2.MarkerArea(markerElement);

    markerArea.settings.displayMode = 'popup';
    markerArea.renderAtNaturalSize = true;
    markerArea.settings.defaultColor = 'black';
    markerArea.settings.defaultFillColor = 'black';

    markerArea.addEventListener('render', event => {
        document.getElementById(element).src = event.dataUrl;
    });
    markerArea.show();
}

// ...Function to handle comic panel clicking and selection
function handlePanelClick(panel) {
    const isSamePanel = selectedPanel === panel;

    if (selectedPanel) {
        selectedPanel.classList.remove('selected');
    }

    panel.classList.toggle('selected', !isSamePanel);
    selectedPanel = isSamePanel ? null : panel;
}

// Change the image of the selected panel to the confirmed image generated by the user
function confirmChanges() {
    const markerImageSrc = document.getElementById('marker-img').src;
    if (selectedPanel) {
        const existingImgElement = selectedPanel.querySelector('img');

        if (existingImgElement) {
            existingImgElement.src = markerImageSrc;
        } else {
            const newImg = document.createElement('img');
            newImg.src = markerImageSrc;
            newImg.alt = "Generated image";
            newImg.height = '100%';
            newImg.width = '100%';
            newImg.classList.add('panel-image'); 
            selectedPanel.appendChild(newImg);
        }
    } else { 
        /* const emptyPanels = document.getElementsByClassName("panel")
        let i = 0;
        while (emptyPanels.img.src !== "" && i < 10) {
            i++;
        }
        emptyPanels[i].src = markerImageSrc; */
        alert("Please select a panel where you want to insert the image");
    }
}

// Calling the annotate function for the main editing area
document.getElementById('editButton').addEventListener('click', () => {
    annotate("marker-img");
});

// Calling annotate for selected panel
function editImage() {
    if (selectedPanel) {
        const selectedPanelImage = selectedPanel.querySelector('.panel-image');

        if (selectedPanelImage) {
            const id = selectedPanelImage.classList[0];
            console.log(id);
            annotate(id);
        } else {
            alert("No image available");
        }
    }
}

// Delete image function on each panel
function deleteImage() {
    if (selectedPanel) {
        const selectedPanelImage = selectedPanel.querySelector('.panel-image');

        if (selectedPanelImage) {
            selectedPanelImage.remove();
        } else {
            alert("No image available");
        }
    }
}

// Function to download the comic panel
document.getElementById('download-button').addEventListener('click', () => {
    const downloadElement = document.getElementsByClassName("comic-panel-wrapper")[0];
    html2canvas(downloadElement).then(canvas => {
        const dataURL = canvas.toDataURL();
        const a = document.createElement('a');

        a.href = dataURL;
        a.download = 'comic_panel.png';

        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    });
});

// Function to change the panel gap via user input
document.getElementById('panelGapSlider').addEventListener('input', () => {
    const panelGapSlider = document.getElementById('panelGapSlider');
    const panelContainer = document.getElementsByClassName('comic-panel-wrapper')[0];
    
    panelContainer.style.gap = panelGapSlider.value + 'px';

    // Reduce the inner borders when gap = 0
    const panels = document.querySelectorAll('.panel'); 
    const currentWidth = getComputedStyle(document.getElementsByClassName('panel')[0]).getPropertyValue('border-width');

    /* if(panelGapSlider.value === "0") {
        panels.forEach((panel, index) => {
            if (index !== 4 && index !== 9) {
                panel.style.borderRightWidth = `${currentWidth / 2}px`;
            }

            if (index !== 0 && index !== 5) {
                panel.style.borderLeftWidth = `${currentWidth/ 2}px`;
            }
            
            if (index < 5) {
                panel.style.borderBottomWidth = `${currentWidth / 2}px`;
            } else {
                panel.style.borderTopWidth = `${currentWidth / 2}px`;
            }
        });
    } else {
        panels.forEach(panel => {
            panel.style.borderWidth = `${currentWidth}px`;
        });
    } */
    // TBD
});

// Function to change border colour via user input
document.getElementById('panelColour').addEventListener('input', () => {
    const colorInput = document.getElementById('panelColour').value;
    const panels = document.querySelectorAll('.panel');

    panels.forEach(panel => {
        panel.style.borderColor = colorInput;
    }); 
});

// Function to change border width via user input
document.getElementById('panelWidth').addEventListener('input', () => {
    const widthInput = document.getElementById('panelWidth');
    const selectedWidth = widthInput.value + 'px';
    const panels = document.querySelectorAll('.panel');

    panels.forEach(panel => {
        panel.style.borderWidth = selectedWidth;
    }); 
});

function openPopup() {
    document.getElementById('overlay').style.display = 'block';
    document.getElementById('info-popup').style.display = 'block';
}

function closePopup() {
    document.getElementById('overlay').style.display = 'none';
    document.getElementById('info-popup').style.display = 'none';
}
